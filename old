import hou
import json, os, glob

import webbrowser

from PySide2.QtGui import *
from PySide2.QtCore import *
from PySide2.QtUiTools import *
from PySide2.QtWidgets import *

texture_dict = {
    "BASE_COLOR": ["diffuse", "diff", "base-color", "basecolor", "base_color", "albedo"],
    "ROUGHNESS": ["roughness", "gloss", "glossiness"],
    "NORMAL": ["normal", "bumb"],
    "AO": ["ao", "ambient_occlusion", "ambient-occlusion", "ambient_occlusion", "ambientocclusion"],
    "DISPLACEMENT": ["displacement", "height"]
}

class Preset():

    def __init__(self, color_variation = False, ao = False, translucency = False, opacity = False, displacement = False):
        self.color_variation = color_variation 
        self.ao = ao 
        self.translucency = translucency 
        self.opacity = opacity 
        self.displacement = displacement

class MainWindow(QMainWindow):

    def __init__(self, debug=True):

        self.debug = debug

        super(MainWindow, self).__init__(hou.ui.mainQtWindow())
    
        self.setWindowTitle("MaterialX creator 0.1")
        self.setGeometry(100, 100, 400, 300)
        self.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.setFixedSize(400, 300)

        main_widget = QWidget()
        main_layout = QVBoxLayout()

        folder_layout = QHBoxLayout()
        self.texture_folder = QLineEdit()
        self.texture_folder.setPlaceholderText("Select texture folder ...")
        folder_layout.addWidget(self.texture_folder)
        texture_folder_btn = QPushButton("Texture folder")
        texture_folder_btn.clicked.connect(self.on_select_texture_folder)
        folder_layout.addWidget(texture_folder_btn)
        main_layout.addLayout(folder_layout)

        settings_box = QGroupBox("Settings")
        settings_box_layout = QVBoxLayout()
        self.color_variation_checkbox = QCheckBox("Color variation")
        self.ao_checkbox = QCheckBox("AO")
        self.translucency_checkbox = QCheckBox("Translucency")
        self.opacity_checkbox = QCheckBox("Opacity")
        self.displacement_checkbox = QCheckBox("Displacement")
        settings_box_layout.addWidget(self.color_variation_checkbox)
        settings_box_layout.addWidget(self.ao_checkbox)
        settings_box_layout.addWidget(self.translucency_checkbox)
        settings_box_layout.addWidget(self.opacity_checkbox)
        settings_box_layout.addWidget(self.displacement_checkbox)
        settings_box.setLayout(settings_box_layout)
        main_layout.addWidget(settings_box)

        self.material_name = QLineEdit()
        self.material_name.setPlaceholderText("Material name")
        main_layout.addWidget(self.material_name)
        self.create_btn = QPushButton("Create MaterialX")
        self.create_btn.clicked.connect(self.on_create_materialx)
        main_layout.addWidget(self.create_btn)

        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)

        # Menu bar
        self.menubar = QMenuBar(self)
        self.menubar.setGeometry(QRect(0, 0, 505, 21))
        self.menuOptions = QMenu(self.menubar)
        self.menuOptions.setTitle('Preset')
        self.menuAbout = QMenu(self.menubar)
        self.menuAbout.setTitle('About')
        self.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(self)
        self.setStatusBar(self.statusbar)
        self.load_preset_action = QAction(self)
        self.load_preset_action.setText('Load...')
        self.load_preset_action.triggered.connect(self.on_load_preset)
        self.save_preset_action = QAction(self)
        self.save_preset_action.setText('Save...')
        self.save_preset_action.triggered.connect(self.on_save_preset)
        self.separator_action = QAction(self)
        self.separator_action.setSeparator(True)
        self.reset_preset_action = QAction(self)
        self.reset_preset_action.setText('Reset')
        self.reset_preset_action.triggered.connect(self.on_reset_settings)
        self.actionDocumentation = QAction(self)
        self.actionDocumentation.triggered.connect(self.on_help)
        self.actionDocumentation.setText('Help..')
        self.menuOptions.addAction(self.load_preset_action)
        self.menuOptions.addAction(self.save_preset_action)
        self.menuOptions.addAction(self.separator_action)
        self.menuOptions.addAction(self.reset_preset_action)
        self.menuAbout.addAction(self.actionDocumentation)
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

    def on_select_texture_folder(self):

        folder_path = hou.ui.selectFile(hou.getenv("HOME"), title="Asset Folder", file_type=hou.fileType.Directory)

        if folder_path:
            self.texture_folder.setText(folder_path)

    def on_create_materialx(self):

        if not self.texture_folder.text() or not self.material_name.text():
            if self.debug: print("Select texture folder and material name")
            return

        obj: hou.Node = hou.node("/obj")

        matnet: hou.ShopNode = obj.node("materialx_collection")
        if matnet is None:
            matnet = obj.createNode("matnet", "materialx_collection")

        mat_subnet: hou.VopNode = matnet.createNode("subnet", self.material_name.text() + "_MAT")

        for node in mat_subnet.children():
            node.destroy()

        files = list_files_with_extensions(hou.expandString(self.texture_folder.text()))

        base_color = list(filter(lambda x: x is not None, [f if sub in f.lower() else None for f in files for sub in texture_dict["BASE_COLOR"]]))
        base_color = base_color[0] if base_color else None

        roughness = list(filter(lambda x: x is not None, [f if sub in f.lower() else None for f in files for sub in texture_dict["ROUGHNESS"]]))
        roughness = roughness[0] if roughness else None

        normal = list(filter(lambda x: x is not None, [f if sub in f.lower() else None for f in files for sub in texture_dict["NORMAL"]]))
        normal = normal[0] if normal else None

        ao = None
        if self.ao_checkbox.isChecked():
            ao = list(filter(lambda x: x is not None, [f if sub in f.lower() else None for f in files for sub in texture_dict["AO"]]))
            ao = ao[0] if ao else None

        displacement = None
        if self.displacement_checkbox.isChecked():
            displacement = list(filter(lambda x: x is not None, [f if sub in f.lower() else None for f in files for sub in texture_dict["DISPLACEMENT"]]))
            displacement = displacement[0] if displacement else None

        create_materialx_network(mat_subnet, base_color, roughness, normal, ao=ao, displacement=displacement, color_variation=self.color_variation_checkbox.isChecked())

        mat_subnet.setMaterialFlag(True)
        mat_subnet.layoutChildren()

        matnet.layoutChildren()

    def on_load_preset(self):
        if self.debug: print("Loafing an existing")

        preset_path = hou.expandString(hou.ui.selectFile(hou.getenv("HOME"), title="Select Preset", chooser_mode=hou.fileChooserMode.Read))
        if not preset_path: return

        if not preset_validation(preset_path):
            hou.ui.displayMessage("File\n {}\n it's not a valid preset".format(preset_path), severity=hou.severityType.Error, title="Preset load error")
            return
        
        with open(preset_path) as raw_data:
            preset_data = json.load(raw_data)

        preset = Preset(preset_data['color_variation'], preset_data['ao'], preset_data['translucency'], preset_data['opacity'], preset_data['displacement'])   

        self.update_settings(preset)

    def on_save_preset(self):

        if self.debug: print("---- Saving new preset ----")

        save_path = hou.expandString(hou.ui.selectFile(hou.getenv("HOME"), title="Save new preset", chooser_mode=hou.fileChooserMode.Write))
        if not save_path: return

        if not save_path.endswith(".json"):
            if self.debug: print("• Added json ext to save path")
            save_path += ".json"

        raw_preset = {}
        raw_preset['color_variation'] = self.color_variation_checkbox.isChecked()
        raw_preset['ao'] = self.ao_checkbox.isChecked()
        raw_preset['translucency'] = self.translucency_checkbox.isChecked()
        raw_preset['opacity'] = self.opacity_checkbox.isChecked()
        raw_preset['displacement'] = self.displacement_checkbox.isChecked()

        with open(save_path, 'w') as json_file:
            json.dump(raw_preset, json_file, indent=2)

        if self.debug: print("• Preset saved")

    def on_reset_settings(self):
        if self.debug: print("on_reset_settings do default")
        self.update_settings(Preset())

    def on_help(self):
        pass

    def update_settings(self, preset: Preset):
        self.color_variation_checkbox.setChecked(preset.color_variation)
        self.ao_checkbox.setChecked(preset.ao)
        self.translucency_checkbox.setChecked(preset.translucency)
        self.opacity_checkbox.setChecked(preset.opacity)
        self.displacement_checkbox.setChecked(preset.displacement)

def create_materialx_network(context, base_color, roughness, normal, ao=None, displacement=None, translucency=None, opacity=None, color_variation=False):
    
    standard: hou.VopNode = context.createNode("mtlxstandard_surface", "mtlxstandard_surface")

    # ----- Base Color -----
    #
    base_color_map: hou.VopNode = context.createNode("mtlximage", "Base_Color")
    base_color_map.parm("file").set(base_color)
    #
    base_color_correction: hou.VopNode = context.createNode("mtlxcolorcorrect", "Base_Color_Correction")
    base_color_correction.setInput(0, base_color_map, 0)
    color_out = base_color_correction
    # ----- Color Variation -----
    if color_variation:
        #
        variation_color_correct: hou.VopNode = context.createNode("mtlxcolorcorrect", "Cariation_Color_Correct")
        variation_color_correct.setInput(0, base_color_correction, 0)
        #
        color_variation_attribute:hou.VopNode = context.createNode("mtlxgeompropvalue", "ColorVariationAttribute")
        color_variation_attribute.parm("geomprop").set("ColorVariation")
        color_variation_attribute.parm("default").set(1)
        #
        color_mix: hou.VopNode = context.createNode("mtlxmix", "VariationMix")
        color_mix.setInput(0, variation_color_correct, 0)
        color_mix.setInput(1, base_color_correction, 0)
        color_mix.setInput(2, color_variation_attribute, 0)
        color_out = color_mix
    # ----- AO -----
    if ao:
        #
        ao_correct: hou.VopNode = context.createNode("mtlximage", "AO")
        ao_correct.parm("file").set(ao)
        ao_correct.parm("signature").set("vector3")
        #
        ao_mutiply: hou.VopNode = context.createNode("mtlxmultiply", "AO_mutiply")
        ao_mutiply.parm("signature").set("vector3")
        ao_mutiply.setInput(0, ao_correct, 0)
        #
        ao_mutiply_color = context.createNode("mtlxmultiply", "AO_mutiply_color")
        ao_mutiply_color.parm("signature").set("color")
        ao_mutiply_color.setInput(0, color_out, 0)
        ao_mutiply_color.setInput(1, ao_mutiply, 0)
        color_out = ao_mutiply_color
    
    standard.setInput(1, color_out, 0)

    # ----- Roughness -----
    #
    roughness_map: hou.VopNode = context.createNode("mtlximage", "Roughness_map")
    roughness_map.parm("file").set(roughness)
    roughness_map.parm("signature").set("float")
    #
    roughness_remap: hou.VopNode = context.createNode("mtlxremap", "Roughness_remap")
    roughness_remap.setInput(0, roughness_map, 0)
    standard.setInput(6, roughness_remap, 0)

    # ----- Normal ----
    #
    normal_map: hou.VopNode = context.createNode("mtlximage", "Normal_map")
    normal_map.parm("file").set(normal)
    normal_map.parm("signature").set("vector3")
    #
    normal_intensity = create_vop_parameter(context, "Normal_Intensity", "float", "normal_intensity", "Normal Intensity")
    normal_intensity.parm("floatdef").set(1)
    #
    mtlxnormalmap: hou.VopNode = context.createNode("mtlxnormalmap", "mtlxnormalmap")
    mtlxnormalmap.setInput(0, normal_map, 0)
    mtlxnormalmap.setInput(1, normal_intensity, 0)
    standard.setInput(40, mtlxnormalmap, 0)

    #
    surface_output: hou.VopNode = context.createNode("subnetconnector", "surface_output")
    surface_output.parm("connectorkind").set("output")
    surface_output.parm("parmname").set("surface")
    surface_output.parm("parmlabel").set("Surface")
    surface_output.parm("parmtype").set("surface")
    surface_output.setInput(0, standard, 0)

    # ----- Displacement ----
    if displacement:
        #
        displacement_map: hou.VopNode = context.createNode("mtlximage", "Displacement")
        displacement_map.parm("file").set(displacement)
        displacement_map.parm("signature").set("float")
        #
        remap_displacement: hou.VopNode = context.createNode("mtlxremap", "Displacement")
        remap_displacement.parm("outlow").set(-.5)
        remap_displacement.parm("outhigh").set(.5)
        remap_displacement.setInput(0, displacement_map, 0)
        #
        displacement_scale = create_vop_parameter(context, "Displacement_Scale", "float", "scale", "Scale")
        displacement_scale.parm("floatdef").set(0.015)
        displacement_scale.parm("rangeflt2").set(10)
        #
        mtlx_displacement: hou.VopNode = context.createNode("mtlxdisplacement", "mtlxdisplacement")
        mtlx_displacement.setInput(0, remap_displacement, 0)
        mtlx_displacement.setInput(1, displacement_scale, 0)
        #
        displacement_output: hou.VopNode = context.createNode("subnetconnector", "displacement_output")
        displacement_output.parm("connectorkind").set("output")
        displacement_output.parm("parmname").set("displacement")
        displacement_output.parm("parmlabel").set("Displacement")
        displacement_output.parm("parmtype").set("displacement")
        displacement_output.setInput(0, mtlx_displacement, 0)

def list_files_with_extensions(directory, extensions=["jpg", "exr"]):
    patterns = [os.path.join(directory, f'*.{ext}') for ext in extensions]
    return [file for pattern in patterns for file in glob.glob(pattern)]

def preset_validation(preset):
    return True

    def on_create_materialx(self):
        pass

    def on_help(self):
        webbrowser.get("chrome").open("https://www.youtube.com/watch?v=dQw4w9WgXcQ&ab_channel=RickAstley")

def get_maps(textures, type):

    res = []

    for tex in textures:
        if type in tex:
            res.append(tex)

    return res

def create_vop_parameter(context, name, type, parmname, parmlabel=None, export=0) -> hou.VopNode:
    vop_parameter: hou.VopNode =  context.createNode("parameter", name)
    vop_parameter.parm("parmtype").set(type)
    vop_parameter.parm("parmname").set(parmname)
    if parmlabel: vop_parameter.parm("parmlabel").set(parmlabel)
    vop_parameter.parm("exportparm").set(export)
    return vop_parameter

win = MainWindow()
win.show()